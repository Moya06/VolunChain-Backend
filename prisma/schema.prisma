generator client {
  provider      = "prisma-client-js" // Specifies the Prisma Client generator
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "darwin-arm64"] // Include necessary targets
}

datasource db {
  provider     = "postgresql" // Specifies PostgreSQL as the database provider
  url          = env("DATABASE_URL") // Loads the database connection URL from environment variables
  directUrl    = env("DIRECT_URL") // For direct connection to the database
  relationMode = "prisma"
}

// User model represents a system user
model User {
  id                       String          @id @default(uuid()) // Unique identifier
  createdAt                DateTime        @default(now()) // Timestamp for record creation
  updatedAt                DateTime        @updatedAt // Timestamp for record update
  name                     String
  lastName                 String?
  email                    String          @unique // Unique email constraint
  wallet                   String          @unique // Unique wallet identifier
  isVerified               Boolean         @default(true) // Auto-verified for wallet-based auth
  verificationToken        String?
  verificationTokenExpires DateTime?
  nfts                     NFT[]           @relation("UserNFTs") // One-to-many relationship with NFTs
  userVolunteers           UserVolunteer[] @relation("UserToVolunteer") // Relation to UserVolunteer
  sentMessages             Message[]       @relation("SentMessages")
  receivedMessages         Message[]       @relation("ReceivedMessages")
}

// Organization model represents an entity like a company or group
model Organization {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  email     String    @unique
  category  String
  wallet    String    @unique
  nfts      NFT[]     @relation("OrganizationNFTs") // One-to-many relationship with NFTs
  projects  Project[] // Add this line for the opposite relation
}

// BaseEntity model for common fields inherited by other models
model BaseEntity {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NFT model represents a Non-Fungible Token
model NFT {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String // Foreign key for User
  organizationId String // Foreign key for Organization
  description    String

  user         User         @relation(fields: [userId], references: [id], name: "UserNFTs")
  organization Organization @relation(fields: [organizationId], references: [id], name: "OrganizationNFTs")

  @@index([userId]) // Index for quick lookup
  @@index([organizationId])
}

// Project model represents a project within the system
model Project {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  name           String       @db.VarChar(255)
  description    String
  location       String       @db.VarChar(255)
  startDate      DateTime
  endDate        DateTime
  status         String       @default("active") // Status can be: active, completed, archived
  organizationId String // Add this field
  organization   Organization @relation(fields: [organizationId], references: [id]) // Add this relation
  volunteers     Volunteer[]
}

// TestItem model is a simple entity for testing purposes
model TestItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  value     Int
  age       Int
}

// UserVolunteer model represents the relationship between Users and Volunteers
model UserVolunteer {
  userId           String // Foreign key for User
  volunteerId      String // Foreign key for Volunteer
  joinedAt         DateTime  @default(now())
  hoursContributed Float     @default(0) // Track hours contributed by the volunteer
  user             User      @relation(fields: [userId], references: [id], name: "UserToVolunteer")
  volunteer        Volunteer @relation(fields: [volunteerId], references: [id], name: "VolunteerToUser")

  @@id([userId, volunteerId]) // Use composite ID from metrics branch
  @@index([userId]) // Keep indexes from main
  @@index([volunteerId]) // Keep indexes from main
}

// Volunteer model represents a volunteer position within a project
model Volunteer {
  id             String          @id @default(uuid())
  name           String
  description    String
  requirements   String
  incentive      String?
  maxVolunteers  Int             @default(10)
  projectId      String
  project        Project         @relation(fields: [projectId], references: [id])
  userVolunteers UserVolunteer[] @relation("VolunteerToUser")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  certificate    Certificate?
  messages       Message[]

  @@index([projectId])
}

model diesel_schema_migrations {
  version String   @id @db.VarChar(50)
  run_on  DateTime @default(now()) @db.Timestamp(6)

  @@map("__diesel_schema_migrations")
}

model escrows {
  id         Int       @id @default(autoincrement())
  user_id    Int
  amount     Decimal   @db.Decimal(10, 2)
  status     String    @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model users {
  id            Int       @id @default(autoincrement())
  username      String    @unique @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  password_hash String
  role          String    @db.VarChar(50)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  escrows       escrows[]
}

model Photo {
  id         String   @id @default(uuid())
  url        String
  userId     String
  uploadedAt DateTime @default(now())
  metadata   Json?
}

model Certificate {
  id            String                   @id @default(cuid())
  volunteerId   String                   @unique
  volunteer     Volunteer                @relation(fields: [volunteerId], references: [id])
  s3Key         String                   @default("https://onlydust-app-images.s3.eu-west-1.amazonaws.com/8ee3b7d84fe0672850e4c81890361b73.png")
  uniqueId      String                   @unique
  customMessage String
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  downloads     CertificateDownloadLog[]
}

model Message {
  id      String    @id @default(uuid())
  content String
  sentAt  DateTime  @default(now())
  readAt  DateTime?

  senderId    String
  receiverId  String
  volunteerId String

  sender    User      @relation("SentMessages", fields: [senderId], references: [id])
  receiver  User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  volunteer Volunteer @relation(fields: [volunteerId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@index([volunteerId])
}

model CertificateDownloadLog {
  id            String      @id @default(cuid())
  certificateId String
  userId        String
  timestamp     DateTime    @default(now())
  certificate   Certificate @relation(fields: [certificateId], references: [id])
}
