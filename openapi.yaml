openapi: 3.0.0
info:
  title: VolunChain API
  description: |
    API for managing projects in VolunChain with versioning support.

    ## Authentication
    VolunChain uses wallet-based authentication with Stellar addresses.
    - No passwords required
    - JWT tokens for session management
    - Support for user and organization profiles

    ## API Structure
    This API uses a simple structure without versioning:
    - `/api/` - Main API endpoints
    - `/api/docs` - API documentation
    
    All endpoints are organized by functionality.
  version: 1.0.0
  contact:
    name: VolunChain Support
    email: support@volunchain.org
servers:
  - url: http://localhost:3000/api
    description: Local development server
  - url: https://api.volunchain.org
    description: Production server

tags:
  - name: Authentication
    description: Wallet-based authentication endpoints
  - name: API Info
    description: API version and health information

paths:
  # API Root endpoint (available at /api/)
  /:
    get:
      summary: "API version information"
      description: "Get information about available API versions"
      operationId: "getApiVersions"
      servers:
        - url: http://localhost:3000/api
          description: API root
      responses:
        '200':
          description: "API version information"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "VolunChain API"
                  versions:
                    type: object
                    properties:
                      v1:
                        type: object
                        properties:
                          status:
                            type: string
                            example: "stable"
                          description:
                            type: string
                            example: "Current stable API version"
                          endpoints:
                            type: string
                            example: "/v1/"
                      v2:
                        type: object
                        properties:
                          status:
                            type: string
                            example: "reserved"
                          description:
                            type: string
                            example: "Reserved for future expansion"
                          endpoints:
                            type: string
                            example: "/v2/"
                  documentation:
                    type: string
                    example: "/api/docs"

  # API Endpoints (all under /api/)
  /auth/register:
    post:
      tags:
        - Authentication
      summary: "Register new user or organization"
      description: |
        Register a new profile in the system. Can be a user or organization.
        
        **Important notes:**
        - Wallet address must be a valid Stellar address (56 characters)
        - Each wallet address can only be registered once
        - Registrations are automatically verified
        - For organizations, category field is required
      operationId: "register"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              user_registration:
                summary: User registration
                value:
                  name: "Juan Pérez"
                  email: "juan.perez@email.com"
                  walletAddress: "GXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
                  profileType: "user"
                  lastName: "Pérez"
              organization_registration:
                summary: Organization registration
                value:
                  name: "Fundación Ambiental Verde"
                  email: "contacto@fundacionverde.org"
                  walletAddress: "GXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
                  profileType: "project"
                  category: "environmental"
      responses:
        '201':
          description: "Registration successful"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: "Validation error or duplicate data"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: "Login with wallet"
      description: |
        Authenticate a user or organization using their wallet address.
        
        **Important notes:**
        - Only requires wallet address
        - Returns JWT token valid for 24 hours
        - Includes profile information in response
      operationId: "login"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              walletAddress: "GXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
      responses:
        '200':
          description: "Login successful"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: "Wallet address not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/profile:
    get:
      tags:
        - Authentication
      summary: "Get authenticated user profile"
      description: |
        Get the profile information of the authenticated user.
        
        **Requirements:**
        - Valid JWT token in Authorization header
        - Accessible for both user and organization profiles
      operationId: "getProfile"
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Profile information retrieved successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '401':
          description: "Invalid or expired token"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/user-only:
    get:
      tags:
        - Authentication
      summary: "User-only route"
      description: |
        Endpoint that can only be accessed by user profiles.
        
        **Requirements:**
        - Valid JWT token
        - User profile type
      operationId: "userOnly"
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Access allowed for users"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User-only route accessed successfully"
        '401':
          description: "Invalid token"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: "Access denied - requires user profile"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/organization-only:
    get:
      tags:
        - Authentication
      summary: "Organization-only route"
      description: |
        Endpoint that can only be accessed by organization profiles.
        
        **Requirements:**
        - Valid JWT token
        - Organization profile type
      operationId: "organizationOnly"
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Access allowed for organizations"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Organization-only route accessed successfully"
        '401':
          description: "Invalid token"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: "Access denied - requires organization profile"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/protected:
    get:
      summary: "Access a protected route"
      operationId: "protectedRoute"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Protected resource accessed successfully"
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/{organizationId}/projects:
    get:
      summary: "Get all projects by organization ID"
      operationId: "getProjectsByOrganizationId"
      parameters:
        - in: path
          name: organizationId
          required: true
          schema:
            type: string
          description: "The ID of the organization"
      responses:
        '200':
          description: "List of projects"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '404':
          description: "No projects found for this organization"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /projects:
    post:
      summary: "Create a new project"
      operationId: "createProject"
      requestBody:
        description: "Project data"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProject'
      responses:
        '201':
          description: "Project created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /projects/{id}:
    get:
      summary: "Get a project by its ID"
      operationId: "getProjectById"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: "The ID of the project"
      responses:
        '200':
          description: "Project found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: "Project not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /volunteers/{volunteerId}/users:
    get:
      summary: "Get all users for a volunteer project"
      operationId: "getUsersByVolunteerId"
      parameters:
        - in: path
          name: volunteerId
          required: true
          schema:
            type: string
          description: "The ID of the volunteer project"
      responses:
        '200':
          description: "List of users"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    CreateProject:
      type: object
      required:
        - name
        - description
        - location
        - startDate
        - endDate
        - organizationId
      properties:
        description:
          type: string
        endDate:
          type: string
          format: date
        location:
          type: string
        name:
          type: string
        organizationId:
          type: string
        startDate:
          type: string
          format: date



    Project:
      type: object
      required:
        - id
        - name
        - description
        - location
        - startDate
        - endDate
        - organizationId
      properties:
        description:
          type: string
        endDate:
          type: string
          format: date
        id:
          type: string
        location:
          type: string
        name:
          type: string
        organizationId:
          type: string
        startDate:
          type: string
          format: date

    User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        email:
          type: string
        id:
          type: string
        name:
          type: string

    # Authentication Schemas
    RegisterRequest:
      type: object
      required:
        - name
        - email
        - walletAddress
        - profileType
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: "Name of the user or organization"
          example: "Juan Pérez"
        email:
          type: string
          format: email
          description: "Unique email address"
          example: "juan.perez@email.com"
        walletAddress:
          type: string
          minLength: 56
          maxLength: 56
          description: "Stellar wallet address (56 characters)"
          example: "GXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
        profileType:
          type: string
          enum: [user, project]
          description: "Type of profile to create"
          example: "user"
        lastName:
          type: string
          maxLength: 100
          description: "Last name (only for user profiles)"
          example: "Pérez"
        category:
          type: string
          maxLength: 100
          description: "Organization category (required for project profiles)"
          example: "environmental"

    RegisterResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "User registered successfully"
        userId:
          type: string
          format: uuid
          description: "User ID (only for user profiles)"
          example: "123e4567-e89b-12d3-a456-426614174000"
        organizationId:
          type: string
          format: uuid
          description: "Organization ID (only for project profiles)"
          example: "123e4567-e89b-12d3-a456-426614174001"

    LoginRequest:
      type: object
      required:
        - walletAddress
      properties:
        walletAddress:
          type: string
          minLength: 56
          maxLength: 56
          description: "Stellar wallet address for authentication"
          example: "GXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Login successful"
        token:
          type: string
          description: "JWT token for authentication"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/UserProfile'

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "Unique user/organization ID"
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: "User/organization name"
          example: "Juan Pérez"
        email:
          type: string
          format: email
          description: "User/organization email"
          example: "juan.perez@email.com"
        wallet:
          type: string
          description: "Stellar wallet address"
          example: "GXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
        profileType:
          type: string
          enum: [user, organization]
          description: "Profile type"
          example: "user"

    ProfileResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Profile accessed successfully"
        user:
          $ref: '#/components/schemas/UserProfile'

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: "Error description"
          example: "Wallet address not found"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: "Field that caused the error"
                example: "walletAddress"
              message:
                type: string
                description: "Specific error message"
                example: "Wallet address must be 56 characters long"
          description: "List of validation errors (only for 400 errors)"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtained from login.
        
        **Format:** `Bearer <token>`
        
        **Example:** `Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...`
